(define feature-if-else #t)
(define feature-nested-if #t)
(define feature-while-loop #t)
(define feature-repeat-loop #t)
(define feature-tail-call #t)

(define break #f)

(define (search-else program wcount)
  (let loop ((start 1)
             (key wcount))
    (cond
      ((zero? start) (- key 1))
      ((and (equal? (vector-ref program key) 'else) (equal? start 1)) key)
      ((> key (- (vector-length program) 1)) break)
      ((equal? (vector-ref program key) 'endif) (loop (- start 1) (+ key 1)))
      ((equal? (vector-ref program key) 'if) (loop (+ start 1) (+ key 1)))
      (else (loop start (+ key 1))))))


(define (word-depth program wcount first second)
  (let loop ((count 1) (key wcount))
    (cond
      ((zero? count) key)
      ((> key (- (vector-length program) 1)) break)
      ((equal? (vector-ref program key) second) (loop (- count 1) (+ key 1)))
      ((equal? (vector-ref program key) first) (loop (+ count 1) (+ key 1)))
      (else (loop count (+ key 1))))))

(define (word-start word program wcount)
  (if (< wcount (vector-length program))
      (if (equal? (vector-ref program wcount) word)
          wcount
          (word-start word program (+ wcount 1)))
      break))

(define (interpret program stack)
  (define (search x vs n)
    (if (equal? x (vector-ref vs n))
        n
        (search x vs (+ n 1))))
  (define (analyse program wcount stack return-stack dict)
    (if (>= wcount (vector-length program))
        stack
        (let ((word (vector-ref program wcount)))
          (if (number? word)
              (analyse program (+ wcount 1) (cons word stack)
                       return-stack dict)
              (cond ((equal? word '+)
                     (analyse program (+ wcount 1)
                              (cons (+ (car stack) (cadr stack))
                                    (cddr stack))
                              return-stack dict))
                    ((equal? word '*)
                     (analyse program (+ wcount 1)
                              (cons (* (car stack) (cadr stack))
                                    (cddr stack)) return-stack dict))
                    ((equal? word '-) (analyse program (+ wcount 1)
                                               (cons (- (cadr stack) (car stack))
                                                     (cddr stack))
                                               return-stack dict))
                    ((equal? word '/) (analyse program (+ wcount 1)
                                               (cons (quotient (cadr stack)
                                                               (car stack))
                                                     (cddr stack))
                                               return-stack dict))
                    ((equal? word 'mod) (analyse program (+ wcount 1)
                                                 (cons (remainder (cadr stack)
                                                                  (car stack))
                                                       (cddr stack))
                                                 return-stack dict))
                    ((equal? word 'neg) (analyse program (+ wcount 1)
                                                 (cons (- (car stack))
                                                       (cdr stack))
                                                 return-stack dict))
                    ((equal? word '=) (analyse program (+ wcount 1)
                                               (cons (or (and (= (cadr stack)
                                                                 (car stack))
                                                              -1) 0)
                                                     (cddr stack))
                                               return-stack dict))
                    ((equal? word '>) (analyse program (+ wcount 1)
                                               (cons (or (and (> (cadr stack)
                                                                 (car stack))
                                                              -1) 0)
                                                     (cddr stack))
                                               return-stack dict))
                    ((equal? word '<) (analyse program (+ wcount 1)
                                               (cons (or (and (< (cadr stack)
                                                                 (car stack))
                                                              -1) 0)
                                                     (cddr stack))
                                               return-stack dict))
                    ((equal? word 'not) (analyse program (+ wcount 1)
                                                 (cons (or (and (= (car stack)
                                                                   0) -1) 0)
                                                       (cdr stack))
                                                 return-stack dict))
                    ((equal? word 'and) (analyse program (+ wcount 1)
                                                 (cons (or (and (not (= (car stack) 0))
                                                                (not (= (cadr stack) 0))
                                                                -1) 0)
                                                       (cddr stack)) return-stack dict))
                    ((equal? word 'or) (analyse program (+ wcount 1)
                                                (cons (or (and (= (car stack) 0)
                                                               (= (cadr stack) 0) 0)
                                                          -1)
                                                      (cddr stack)) return-stack dict))
                    ((equal? word 'drop) (analyse program (+ wcount 1)
                                                  (cdr stack) return-stack dict))
                    ((equal? word 'swap) (analyse program (+ wcount 1)
                                                  (append (list (cadr stack) (car stack))
                                                          (cddr stack))
                                                  return-stack dict))
                    ((equal? word 'dup) (analyse program (+ wcount 1)
                                                 (append (list (car stack) (car stack))
                                                         (cdr stack))
                                                 return-stack dict))
                    ((equal? word 'over) (analyse program (+ wcount 1)
                                                  (append (list (cadr stack) (car stack)
                                                                (cadr stack))
                                                          (cddr stack))
                                                          return-stack dict))
                    ((equal? word 'rot) (analyse program (+ wcount 1)
                                                 (append (list (caddr stack) (cadr stack)
                                                               (car stack))
                                                         (cdddr stack)) return-stack dict))
                    ((equal? word 'depth) (analyse program (+ wcount 1)
                                                   (cons (length stack) stack) return-stack dict))
                    ((equal? word 'define) (analyse program (+ 1 (search 'end program (+ wcount 1)))
                                                    stack return-stack (cons
                                                                        (list (vector-ref program
                                                                              (+ wcount 1))
                                                                              (+ wcount 2))
                                                                        dict)))
                    ((equal? word 'end) (analyse program (car return-stack) stack
                                                 (cdr return-stack) dict))
                    ((equal? word 'exit) (analyse program (car return-stack)
                                                  stack (cdr return-stack) dict)) 
                    ((equal? word 'if) (analyse program (if (zero? (car stack))
                                                            (+ (search-else program
                                                                            (+ 1 wcount))
                                                               1)
                                                            (if (word-depth program
                                                                            (+ 1 wcount)
                                                                            'if 'endif)
                                                                (+ 1 wcount)
                                                                break))
                                                (cdr stack) return-stack dict))
                    ((equal? word 'endif) (analyse program (+ 1 wcount) stack return-stack dict))
                    ((equal? word 'else) (analyse program (+ (word-start 'endif program wcount) 1)
                                                  stack return-stack dict))
                    ((equal? word 'while) (if (not (zero? (car stack)))
                                              (analyse program (+ 1 wcount) (cdr stack)
                                                       (cons wcount return-stack) dict)
                                              (analyse program (word-depth program
                                                                           (+ 1 wcount)
                                                                           'while 'wend)
                                                       (cdr stack) return-stack dict)))
                    ((equal? word 'wend) (analyse program (car return-stack) stack
                                                  (cdr return-stack) dict))
                    
                    ((equal? word 'repeat) (analyse program (+ 1 wcount) stack
                                                    (cons wcount return-stack) dict))
                    ((equal? word 'until) (if (not (zero? (car stack)))
                                              (analyse program (+ 1 wcount) (cdr stack)
                                                       (cdr return-stack) dict)
                                              (analyse program (car return-stack) (cdr stack)
                                                       (cdr return-stack) dict)))
                    ((equal? word 'tail) (analyse program (cadr (assoc (vector-ref program
                                                                                   (+ wcount 1))
                                                               dict)) stack return-stack dict))
                    ((assoc word dict) (analyse program (cadr (assoc word dict)) stack (cons
                                                                                        (+ wcount 1)
                                                                                         return-stack)
                                                dict))
                    (else
                     (analyse program (+ wcount 1) stack return-stack dict)))))))
  (analyse program 0 stack '() '()))
